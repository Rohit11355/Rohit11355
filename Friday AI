<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.speech.SpeechRecognizer
import android.speech.RecognitionListener
import android.content.Intent
import android.speech.RecognizerIntent
import androidx.appcompat.app.AppCompatActivity
import java.util.*

class MainActivity : AppCompatActivity(), TextToSpeech.OnInitListener, RecognitionListener {

    private lateinit var tts: TextToSpeech
    private lateinit var speechRecognizer: SpeechRecognizer

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tts = TextToSpeech(this, this)
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this)
        speechRecognizer.setRecognitionListener(this)

        startListening()
    }

    private fun startListening() {
        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
        speechRecognizer.startListening(intent)
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            tts.language = Locale.getDefault()
            speak("Hello Rohit, how can I help you?")
        }
    }

    private fun speak(text: String) {
        tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, "")
    }

    override fun onResults(results: Bundle?) {
        val matches = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
        matches?.let {
            for (result in it) {
                if (result.contains("hey friday", true)) {
                    speak("Hello Rohit, how can I help you?")
                }
                handleCommand(result)
            }
        }
    }

    private fun handleCommand(command: String) {
        when {
            command.contains("open app", true) -> speak("Which app would you like to open?")
            command.contains("send message", true) -> speak("Who would you like to send a message to?")
            // Add more commands and actions here
        }
    }

    // Implement other RecognitionListener methods here...
}
import android.app.Service
import android.content.Intent
import android.os.IBinder

class AssistantService : Service() {

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        // Start the assistant logic here
        return START_STICKY
    }
}<service android:name=".AssistantService" android:foregroundServiceType="microphone"/>
val serviceIntent = Intent(this, AssistantService::class.java)
startForegroundService(serviceIntent)
implementation 'com.google.cloud:google-cloud-dialogflow:0.118.0'
implementation 'com.google.api-client:google-api-client:1.30.4'
import com.google.api.gax.core.FixedCredentialsProvider
import com.google.auth.oauth2.GoogleCredentials
import com.google.cloud.dialogflow.v2.*

class MainActivity : AppCompatActivity(), TextToSpeech.OnInitListener, RecognitionListener {

    // ... existing code ...

    private fun handleCommand(command: String) {
        // Call Dialogflow API and process the response
    }
    
    private fun callDialogflow(command: String): String {
        val credentialsStream = resources.openRawResource(R.raw.dialogflow_credentials)
        val credentials = GoogleCredentials.fromStream(credentialsStream)
        val sessionsSettings = SessionsSettings.newBuilder()
            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))
            .build()
        val sessionsClient = SessionsClient.create(sessionsSettings)
        val session = SessionName.of("project-id", "unique-session-id")

        val queryInput = QueryInput.newBuilder()
            .setText(TextInput.newBuilder().setText(command).setLanguageCode("en-US"))
            .build()

        val response = sessionsClient.detectIntent(session, queryInput)
        return response.queryResult.fulfillmentText
    }
}
private fun handleCommand(command: String) {
    when {
        command.contains("open app", true) -> openApp(command)
        command.contains("send message", true) -> sendMessage(command)
        // Add more command handling here
    }
}

private fun openApp(command: String) {
    val packageName = "com.example.app"  // Example package name
    val intent = packageManager.getLaunchIntentForPackage(packageName)
    if (intent != null) {
        startActivity(intent)
    } else {
        speak("App not found.")
    }
}

private fun sendMessage(command: String) {
    // Logic to send a message
}
